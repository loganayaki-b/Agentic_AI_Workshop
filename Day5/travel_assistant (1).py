# -*- coding: utf-8 -*-
"""Travel assistant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G9zt8CiDjZOausz0Ggw0UfnedR7x7sGM
"""

# Step 1: Install required packages
!pip install langchain langchain-google-genai tavily-python requests langchain-community

# Step 2: Import packages
import os
import requests
from langchain.tools import tool
from tavily import TavilyClient
from langchain.tools.tavily_search import TavilySearchResults # This import should now work
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_core.prompts import ChatPromptTemplate
from contextlib import redirect_stdout
import io

# Step 3: Set API Keys
os.environ["GOOGLE_API_KEY"] = "AIzaSyDyISlBjQ_oYINPse2p-b7mZFSz8o0QhEw"  # Replace with your Gemini API key
os.environ["TAVILY_API_KEY"] = "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"  # Replace with your Tavily API key
weather_api_key = "246be2fdf3cd4667b4664902251306"  # Replace with your WeatherAPI key

# Step 4: Create custom weather tool
@tool
def get_weather(city: str) -> str:
    """Get current weather for a city."""
    url = f"http://api.weatherapi.com/v1/current.json?key={weather_api_key}&q={city}"
    response = requests.get(url)
    data = response.json()
    if "current" in data:
        temp_c = data['current']['temp_c']
        condition = data['current']['condition']['text']
        return f"The current weather in {city} is {temp_c}°C with {condition}."
    else:
        return "Weather information not available."

# Step 5: Set up Tavily search tool
search_tool = TavilySearchResults()

# Step 6: Create LangChain Agent
llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash", temperature=0.3)
tools = [get_weather, search_tool]

prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful travel assistant. You provide current weather and list top 5 tourist attractions in a city."),
    ("human", "{input}"),
    ("placeholder", "{agent_scratchpad}"),
])

agent = create_tool_calling_agent(llm=llm, tools=tools, prompt=prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=False)

# Step 7: Get user input
city = input("Enter a destination city: ")
user_input = f"What is the weather and top 5 tourist attractions in {city}?"

# Step 8: Run the agent (hide logs)
f = io.StringIO()
with redirect_stdout(f):
    response = agent_executor.invoke({"input": user_input})

# Step 9: Extract info and format
if "Top attractions" in ai_raw_output:
    parts = ai_raw_output.split("Top attractions", maxsplit=1)
    weather = parts[0].strip()
    attractions_section = parts[1].strip().split("\n")
    attractions = [
        line.strip(" .•-") for line in attractions_section if line.strip()
    ][:5]  # Get top 5 non-empty clean lines
else:
    weather = ai_raw_output.strip()
    attractions = []

# Step 10: Show and save result
print(f"\n🧳 Travel Assistant Output for {city}\n")
print("🌤️ Weather:\n" + weather + "\n")

if attractions:
    print("🗺️ Top Attractions:")
    for idx, place in enumerate(attractions, 1):
        print(f"{idx}. {place}")

output_path = "/content/travel_assistant_output.txt"
with open(output_path, "w", encoding="utf-8") as f:
    f.write(f"🧳 Travel Assistant Output for {city}\n\n")
    f.write("🌤️ Weather:\n" + weather + "\n\n")
    if attractions:
        f.write("🗺️ Top Attractions:\n")
        for idx, place in enumerate(attractions, 1):
            f.write(f"{idx}. {place}\n")

from google.colab import files
files.download(output_path)