# -*- coding: utf-8 -*-
"""web search2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12XJaevxjJqEzLTt94J2tf7qvXxor641K
"""

!pip install google-generativeai tavily-python

import os

# Replace with your actual keys
os.environ['GOOGLE_API_KEY'] = 'AIzaSyDyISlBjQ_oYINPse2p-b7mZFSz8o0QhEw'
os.environ['TAVILY_API_KEY'] = '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'

import google.generativeai as genai
from tavily import TavilyClient

# Setup Gemini
genai.configure(api_key=os.environ['GOOGLE_API_KEY'])

# Setup Tavily
tavily = TavilyClient(api_key=os.environ['TAVILY_API_KEY'])

class ReActAgent:
    def __init__(self, topic):
        self.topic = topic
        self.questions = []
        self.answers = {}

    def generate_research_questions(self):
        model = genai.GenerativeModel("gemini-pro")
        prompt = f"Generate 5 research questions on the topic: {self.topic}"
        response = model.generate_content(prompt)
        self.questions = [q.strip("-‚Ä¢1234567890. ").strip()
                          for q in response.text.strip().split("\n") if q.strip()]
        return self.questions

    def search_web(self):
        for question in self.questions:
            results = tavily.search(query=question, search_depth="advanced", max_results=3)
            self.answers[question] = [(r["title"], r["content"]) for r in results["results"]]

    def generate_report(self):
        report = f"# Research Report on: {self.topic}\n\n"
        report += "## Introduction\n"
        report += f"This report provides an overview of key questions related to **{self.topic}**.\n\n"

        for i, question in enumerate(self.questions, 1):
            report += f"### {i}. {question}\n"
            for title, content in self.answers.get(question, []):
                report += f"- **{title}**: {content}\n"
            report += "\n"

        report += "## Conclusion\n"
        report += "This report summarizes findings from web sources based on LLM-generated questions.\n"
        return report



# Define your topic
topic = "Climate Change"  # You can change this to anything

# List available models to find the correct one
for m in genai.list_models():
  if 'generateContent' in m.supported_generation_methods:
    print(m.name)

# Create and run the agent
# Replace "gemini-pro" with a valid model name from the list above,
# for example, 'models/gemini-pro-tuned' or 'models/gemini-1.0-pro-latest'
# based on the output of the list_models() call.
# For demonstration, let's assume 'gemini-1.0-pro-latest' is available.
class ReActAgent:
    def __init__(self, topic):
        self.topic = topic
        self.questions = []
        self.answers = {}

    def generate_research_questions(self):
        # Use the correct model name found from the list_models() call
        model = genai.GenerativeModel("gemini-2.0-flash") # Changed model name
        prompt = f"Generate 5 research questions on the topic: {self.topic}"
        response = model.generate_content(prompt)
        self.questions = [q.strip("-‚Ä¢1234567890. ").strip()
                          for q in response.text.strip().split("\n") if q.strip()]
        return self.questions

    def search_web(self):
        for question in self.questions:
            results = tavily.search(query=question, search_depth="advanced", max_results=3)
            self.answers[question] = [(r["title"], r["content"]) for r in results["results"]]

    def generate_report(self):
        report = f"# Research Report on: {self.topic}\n\n"
        report += "## Introduction\n"
        report += f"This report provides an overview of key questions related to **{self.topic}**.\n\n"

        for i, question in enumerate(self.questions, 1):
            report += f"### {i}. {question}\n"
            for title, content in self.answers.get(question, []):
                report += f"- **{title}**: {content}\n"
            report += "\n"

        report += "## Conclusion\n"
        report += "This report summarizes findings from web sources based on LLM-generated questions.\n"
        return report

agent = ReActAgent(topic)
print("üß† Generating research questions...")
agent.generate_research_questions()

print("üåê Searching the web for answers...")
agent.search_web()

print("üìÑ Compiling the final report...")
final_report = agent.generate_report()

# Display the final report
print(final_report)

# Step 6: Display the Report
from IPython.display import Markdown, display
display(Markdown(final_report))

# Step 7: (Optional) Save to File
with open("research_report.md", "w") as f:
    f.write(final_report)